name: Sync from Hugging Face Space

on:
  repository_dispatch:
    types: [hf-space-updated]
  workflow_dispatch:
    inputs:
      hf_space_id:
        description: "HF Space ID (org/space)"
        required: false
      hf_space_branch:
        description: "Branche du Space"
        required: false
        default: "main"

permissions:
  contents: write

concurrency:
  group: sync-from-hf
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo GitHub
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      # 2) Outils
      - name: Install git-lfs, rsync, jq
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y git-lfs rsync jq
          git lfs install

      # 3) RÃ©solution des variables
      - name: Resolve config (branch & Space)
        id: cfg
        run: |
          set -euxo pipefail
          BRANCH="${GITHUB_REF_NAME:-}"
          if [ -z "$BRANCH" ]; then
            BRANCH="$(git symbolic-ref --short HEAD 2>/dev/null || echo main)"
          fi
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

          SPACE_ID_INPUT="${{ github.event.inputs.hf_space_id }}"
          SPACE_ID_SECRET="${{ secrets.HF_SPACE_ID }}"
          SPACE_ID="${SPACE_ID_INPUT:-$SPACE_ID_SECRET}"
          if [ -z "$SPACE_ID" ]; then
            echo "::error::HF_SPACE_ID manquant (input ou secret Actions)."
            exit 1
          fi
          echo "space_id=$SPACE_ID" >> "$GITHUB_OUTPUT"

          SPACE_BRANCH_INPUT="${{ github.event.inputs.hf_space_branch }}"
          SPACE_BRANCH_SECRET="${{ secrets.HF_SPACE_BRANCH }}"
          SPACE_BRANCH="${SPACE_BRANCH_INPUT:-${SPACE_BRANCH_SECRET:-main}}"
          echo "space_branch=$SPACE_BRANCH" >> "$GITHUB_OUTPUT"

      # 4) Auth propre + clone du Space
      - name: Configure HF auth & clone Space
        run: |
          set -euxo pipefail
          CLONE_DIR="$RUNNER_TEMP/hfspace"
          rm -rf "$CLONE_DIR"

          # ðŸ‘‰ Force l'en-tÃªte Authorization pour tout le domaine huggingface.co
          if [ -n "${{ secrets.HF_TOKEN }}" ]; then
            git config --global http.https://huggingface.co/.extraheader "Authorization: Bearer ${{ secrets.HF_TOKEN }}"
          fi

          # Clone (privÃ© ou public)
          git clone --branch "${{ steps.cfg.outputs.space_branch }}" \
            "https://huggingface.co/spaces/${{ steps.cfg.outputs.space_id }}" \
            "$CLONE_DIR"

          # Nettoyage de l'en-tÃªte aprÃ¨s clone (hygiÃ¨ne)
          if [ -n "${{ secrets.HF_TOKEN }}" ]; then
            git config --global --unset-all http.https://huggingface.co/.extraheader || true
          fi

      # 5) BONUS : matÃ©rialiser LFS (vraies binaires)
      - name: Materialize LFS files from HF clone
        working-directory: ${{ runner.temp }}/hfspace
        run: |
          set -euxo pipefail
          git lfs install
          git lfs fetch --all || true
          git lfs checkout || true

      # 6) Miroir HF -> repo
      - name: Mirror files (HF â†’ GitHub working tree)
        run: |
          set -euxo pipefail
          CLONE_DIR="$RUNNER_TEMP/hfspace"
          rsync -a --delete --exclude '.git/' --filter=':- .gitignore' "$CLONE_DIR/" .

      # 7) Commit & push (HF gagne)
      - name: Commit & push (HF wins)
        run: |
          set -euxo pipefail
          BRANCH="${{ steps.cfg.outputs.branch }}"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes after sync. Exiting."
            exit 0
          fi

          # Neutraliser LFS pour Ã©viter les pointeurs sur images web, etc.
          git -c filter.lfs.clean= \
              -c filter.lfs.smudge= \
              -c filter.lfs.process= \
              -c filter.lfs.required=false add -A

          git -c filter.lfs.clean= \
              -c filter.lfs.smudge= \
              -c filter.lfs.process= \
              -c filter.lfs.required=false commit \
              -m "chore(sync): mirror HF Space â†’ GitHub $(date -u +%F-%H%M%SZ)"

          git fetch origin "$BRANCH" || true
          if ! git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            git push --set-upstream origin "HEAD:$BRANCH"
          else
            git push --force-with-lease origin "HEAD:$BRANCH"
          fi
